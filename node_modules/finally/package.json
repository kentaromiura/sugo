{
  "name": "finally",
  "version": "0.0.4",
  "description": "sane flow control library",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "github.com/kamicane/finally"
  },
  "dependencies": {
    "prime": "0.3"
  },
  "devDependencies": {
    "mocha": "1.x",
    "expect.js": "0.2"
  },
  "keywords": [
    "flow",
    "control"
  ],
  "scripts": {
    "test": "./node_modules/.bin/mocha ./test"
  },
  "author": {
    "name": "Valerio Proietti",
    "email": "kamicane@gmail.com"
  },
  "license": "MIT",
  "readme": "Finally\n=======\n\nFinally is a simple flow control library for node.js and the browsers, with a mentally sane API.\n\n## It works like this\n\nThink of your flow as an array of sequential operations, each one containing an array of parallel operations.\n\n## Reading 2 files sequentially\n\n```js\nvar fs = require('fs')\nvar flow = require('finally')\n\nflow(function(){\n    fs.readFile('path/to/file', 'utf-8', this.continue)\n    // this.continue is a node-style callback that also triggers the next sequential\n})\n.then(function(error, data1){\n    if (error) this.break(error)\n    // this.break is a node-style callback that also triggers the last sequential\n    fs.readFile('path/to/file', 'utf-8', function(error, data2) {\n        this.continue(error, data1, data2)\n    }.bind(this))\n})\n.finally(function(error, data1, data2){\n    if (error) throw error\n    console.log(data1, data2)\n})\n```\n\n## Reading 2 files in parallel\n\n```js\nvar fs = require('fs')\nvar flow = require('finally')\n\nflow(\n    function(){\n        fs.readFile('path/to/file', 'utf-8', this.done)\n        // this.done is a node-style callback that increments the parallels counter and\n        // triggers the next sequential when all are completed.\n        // the first argument passed to done is then distributed, in order, to the next sequential\n    },\n    function(){\n        fs.readFile('path/to/file', 'utf-8', this.done)\n    },\n)\n.finally(function(error, data1, data2){\n    if (error) throw error\n    else console.log(data1, data2)\n})\n```\n\n## Spreading arguments\n\n```js\nvar fs = require('fs')\nvar flow = require('finally')\n\nflow(function(){\n  fs.readFile('path/to/file.json', function(error, data){\n    if (error) return this.break(error) // goes to finally\n    var someObject = JSON.parse(data)\n    var someArray = someObject.someArray // someArray is [0,1,2,3,4]\n    this.spread(null, someArray)\n    // this.spread is a node-style callback that triggers the next sequential\n    // n times as the array's length\n    // treating the next sequential as an array of parallels\n    // each iteration gets the array[index] value as a single argument (after error, ofcourse)\n  }.bind(this))\n})\n.then(function(error, n){\n    this.done(error, n + 1)\n})\n.finally(function(error, n1, n2, n3, n4, n5){\n    if (error) throw error\n    else console.log(n1, n2, n3, n4, n5) // [1,2,3,4,5]\n})\n```\n\n## Continuing on error\n\nSay we want to continue on error only, for instance to find the first existing file.\n\n```js\nvar fs = require('fs')\nvar flow = require('finally')\n\nflow(function(){\n  fs.readFile('path/to/file1', function(error, data){\n    if (error) this.continue(error)\n    else this.break(null, 'path/to/file1', data)\n  }.bind(this))\n})\n.then(function(error, n){\n    fs.readFile('path/to/file2', function(error, data){\n      if (error) this.continue(error)\n      else this.break(null, 'path/to/file2', data)\n    }.bind(this))\n})\n.then(function(error, n){\n    fs.readFile('path/to/file3', function(error, data){\n      if (error) this.continue(error)\n      else this.break(null, 'path/to/file3', data)\n    }.bind(this))\n})\n.finally(function(error, path, data){\n    if (error) console.log('no existing file found')\n    else console.log('first existing file was ' + path + ' with data ' + data)\n})\n```\n\nBut we can also automatically generate it:\n\n```js\nvar fs = require('fs')\nvar flow = require('finally')\n\nvar ƒ = flow()\n\n['path/to/file1', 'path/to/file2', 'path/to/file3'].forEach(function(path) {\n    ƒ.then(function(error){\n        fs.readFile(path, function(error, data){\n          if (error) this.continue(error)\n          else this.break(null, path, data)\n        }.bind(this))\n    })\n})\n\nƒ.finally(function(error, path, data){\n    if (error) console.log('no existing file found')\n    else console.log('first existing file was ' + path + ' with data ' + data)\n})\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kamicane/finally/issues"
  },
  "homepage": "https://github.com/kamicane/finally",
  "_id": "finally@0.0.4",
  "_from": "finally@*"
}
